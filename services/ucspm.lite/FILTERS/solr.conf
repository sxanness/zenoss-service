multiline {
    pattern => "^%{TIMESTAMP_ISO8601}"
    negate => true
    what => "previous"
}

grok {
    break_on_match => true

#Match messages like this:
#2017-08-28 15:50:24.674 INFO  (qtp1348949648-15) [c:zenoss_model s:shard1 r:core_node1 x:zenoss_model_shard1_replica1] o.a.s.c.S.Request [zenoss_model_shard1_replica1]  webapp=/solr path=/admin/ping params={wt=json} hits=5897 status=0 QTime=0
	match => [ "message", "%{TIMESTAMP_ISO8601:datetime}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}\((?<thread>[a-zA-Z0-9\-_.: ]+)\)%{SPACE}%{DATA:message}" ]
}

mutate {
    # Convert "ss,SSS" to "ss.SSS" in case we hit some older/different logs
    gsub => [ "datetime", "\,", "." ]
}

# This filter parses the datetime field into a time value,
# removes the datetime field from the data, and
# then uses the parsed value as the \"@timestamp\" for the message.
date {
    match => [ "datetime", "yyyy-MM-dd HH:mm:ss.SSS" ]
    remove_field => ["datetime"]
}
